# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_EMAIL   - login info for docker hub
# DOCKER_USER
# DOCKER_PASS
# GEOLITE_API_KEY
#
version: 2.1

jobs:
  test:
    docker:
      - image: rust:latest
    steps:
      - checkout
      - download-geolite
      - run:
          name: Build
          command: cargo build --release
      - run:
          name: Test
          command: cargo test --release

  lint:
    docker:
      - image: rust:latest
    steps:
      - checkout
      - run:
          name: Setup Rust
          command: |
            rustup component add rustfmt
            rustup component add clippy
            cargo install cargo-audit
      - run:
          name: Rustfmt
          command: cargo fmt -- --check
      - run:
          name: Clippy
          command: cargo clippy --all-targets --all-features
      - run:
          name: Package Audit
          command: |
            mkdir -p ~/.cargo
            cp .cargo/audit.toml ~/.cargo/audit.toml
            cargo audit

  build:
    docker:
      - image: cimg/base:current
    working_directory: /dockerflow
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - download-geolite
      - run:
          name: Build Docker image
          command: docker build -t app:build .

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: mkdir -p /cache; docker save -o /cache/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{epoch}}
          paths:
            - /cache/docker.tar

  publish:
    docker:
      - image: cimg/base:current
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                IMAGE="${DOCKERHUB_REPO}:latest"
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
                IMAGE="${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            else
                echo "Refusing to push to dockerhub for non-master branch without tag"
                exit 1
            fi
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag app:build $IMAGE
            docker push $IMAGE

commands:
  download-geolite:
    steps:
      - run:
          name: Download GeoLite database
          command: |
            if [ "${GEOLITE_API_KEY}" == "" ]; then
              echo "Can't fetch GeoLite database"
              exit 1
            fi
            URL="https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${GEOLITE_API_KEY}&suffix=tar.gz"
            curl "$URL" --output geolite.tar.gz
            tar --strip-components=1 --wildcards -zxvf geolite.tar.gz -- '*/GeoLite2-Country.mmdb'
            rm geolite.tar.gz

workflows:
  test:
    jobs:
      - test
      - lint

  build-publish:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/

      - lint:
          filters:
            tags:
              only: /.*/

      - build:
          filters:
            tags:
              only: /.*/

      - publish:
          requires:
            - test
            - lint
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: master
